cache align on Matrix class
monte carlo maybe for AI
dynamic shader generation
refine VertexData + lock/unlock attributes
abstract mesh and model draw order, 1. draw opaques, 2. sort transparents, 3. draw transparents
refine Material class, there can be more than 1 Texture for each type (why?) and also a lot more Texture types
store opacity in each model object, and in object coordinator map from Entity to distance from camera
stop calling every base class an interface
precompute angle between light sources and entities maybe?
load models with material and attach material shouldn't take in an entity because it overrides the original model's material
continuous edit & continue: make game layer a dll and have the platform layer check the dll and when it changes load the new dll, AKA hot-reloading
rename MacApplication since it isnt OS specific at all
2d: combine position and texture into 1 vec4
change const& function parameter for types which its faster to create a copy (for example there is a lot of Matrix.hpp)
batch rendering entities
better logging system: use files maybe and log function parameter values as well
shader class definition should include setting up its predefined uniforms, so each Model can have its own uniforms it wants
    to use along with its shader
have better api to create primitives
naming in ObjectCoordinator is inconsistent.. name everything entity maybe instead of object/modelb
instancing rendering: https://learnopengl.com/Advanced-OpenGL/Instancing, most of the performance is lost because of all the draw cals, even a 1000 draw calls already is enough to lower the frame rate from 60 to 50, instancing: reduce the number of CPU->GPU draw calls
particle system: https://learnopengl.com/In-Practice/2D-Game/Particles
need proper 2d rotation before being able to remove the need for dynamic VBO. Problem is that entities cant share the same Model instance that has dynamic VBO, as transforming it would transform all entities
make a particle generator attachable to an entity
fix vsync (deltaTime varies a lot)

Problems:
Need different loaded model instances if we want to update the model's meshes dynamically, in this case they can't be shared